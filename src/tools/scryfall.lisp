(defpackage malaga/tools/scryfall
  (:use :cl)
  (:export #:sync-data))

(in-package malaga/tools/scryfall)

(defun ingest-data ()
  (with-open-file (in (uiop:getenv "MALAGA_CARD_DATA") :direction :input :if-does-not-exist nil)
    (let ((item-count (loop :for line = (read-line in nil nil) :for count :from 0 :unless line :return count)))
      ; Reset file pointer to 0
      (file-position in 0)
      (loop :for l = (read-line in nil nil) :for c :from 1 :while l :do (process-scryfall-object l c item-count)))))

(defun process-scryfall-object (object count total-count)
  (when (str:starts-with-p "{" (str:trim object))
    (format t ">>> ~,2f%" (* 100 (/ count total-count)))
    (finish-output)

    (dotimes (i 16)
        (write-char #\Backspace))

    (let ((card (json:decode-json-from-string (str:trim object))))
      (barghest/controllers:get-or-create malaga/trader/controllers:+card+
        :scryfall-id (cdr (assoc :id card))
        :name (cdr (assoc :name card))
        :lang (cdr (assoc :lang card))
        :scryfall-uri (cdr (assoc :scryfall--uri card))
        :uri (cdr (assoc :uri card))
        :rarity (cdr (assoc :rarity card))
        :price-usd (or (cdr (assoc :usd (cdr (assoc :prices card)))) 0)
        :price-usd-foil (or (cdr (assoc :usd-foil (cdr (assoc :prices card)))) 0)
        :price-usd-etched (or (cdr (assoc :usd-etched (cdr (assoc :prices card)))) 0)
        :price-eur (or (cdr (assoc :eur (cdr (assoc :prices card)))) 0)
        :price-eur-foil (or (cdr (assoc :eur-foil (cdr (assoc :prices card)))) 0)
        :price-eur-etched (or (cdr (assoc :eur-etched (cdr (assoc :prices card)))) 0)
        :image-png (or (cdr (assoc :png (cdr (assoc :image--uris card)))) "")
        :image-border-crop (or (cdr (assoc :border--crop (cdr (assoc :image--uris card)))) "")
        :image-art-crop (or (cdr (assoc :art--crop (cdr (assoc :image--uris card)))) "")
        :image-large (or (cdr (assoc :large (cdr (assoc :image--uris card)))) "")
        :image-normal (or (cdr (assoc :normal (cdr (assoc :image--uris card)))) "")
        :image-small (or (cdr (assoc :small (cdr (assoc :image--uris card)))) "")
        :set (cdr (assoc :set card))))))

(defun get-latest-bulk-data ()
  (with-input-from-string (json-stream (malaga/tools/utils:get-data (uiop:getenv "MALAGA_BULK_DATA")))
    (loop :for data :in (cdr (assoc :data (json:decode-json json-stream)))
          :collect `(:type ,(cdr (assoc :type data)) :uri ,(cdr (assoc :download--uri data))))))

(defun sync-data ()
  (malaga/tools/utils:download-files (get-latest-bulk-data) (uiop:getenv "MALAGA_CARD_DATA"))
  (format t ">>> Data Sync'd!~%")
  (format t ">>> Started: ~A~%" (local-time:now))
  (ingest-data)
  (format t ">>> 100.000%~%")
  (format t ">>> Stopped: ~A~%" (local-time:now)))
